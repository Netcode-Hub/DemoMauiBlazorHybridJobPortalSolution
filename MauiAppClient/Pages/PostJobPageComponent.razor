@page "/post-job"

@attribute [Authorize]
@using Havit.Blazor.Components.Web.Bootstrap
@using Library.Models
@using MauiAppClient.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.DropDowns
@using System.Net.Http.Json
@using Syncfusion.Blazor.Inputs
@inject BaseServices baseService

<PageTitle>Post Job</PageTitle>
<HxNavbar CssClass="bg-primary nav">
    <HxNavbarText CssClass="text-white">Post Job</HxNavbarText>
</HxNavbar>
<div class="card mb-5 mt-5">
    <div class="card-header"><h4>Post Job</h4></div>
    <div class="card-body">
        <EditForm Model="PostJobModel" OnValidSubmit="HandleSaveOperation">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="card  border-1 shadow-lg">
                <div class="card-header bg-white"> <h5>Provide Job Information</h5></div>
                <div class="card-body">
                    <div class="form-group">
                        <SfTextBox Enabled="true" Placeholder="Job Title" FloatLabelType="FloatLabelType.Auto" ValidateOnInput="true" @bind-Value="PostJobModel.Title" Type="InputType.Text" ShowClearButton="true"></SfTextBox>
                        <ValidationMessage For="()=>PostJobModel.Title" />
                    </div>
                    <div class="form-group mt-3">
                        <SfDropDownList TValue="string" TItem="Category" Placeholder="Select Job Category" DataSource="@Categories">
                            <DropDownListFieldSettings Value="Id" Text="Title"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="Category" ValueChange="OnCategoryValueChange"></DropDownListEvents>
                        </SfDropDownList>
                        <ValidationMessage For="()=>PostJobModel.CategoryId" />
                    </div>
                    <div class="form-group">
                        <SfTextBox Enabled="true" Placeholder="Job Function" FloatLabelType="FloatLabelType.Auto" @bind-Value="PostJobModel.Function" ValidateOnInput="true" Type="InputType.Text" ShowClearButton="true"></SfTextBox>
                        <ValidationMessage For="()=>PostJobModel.Function" />
                    </div>
                    <div class="form-group">
                        <SfTextBox Enabled="true" Placeholder="Job Description" FloatLabelType="FloatLabelType.Auto" @bind-Value="PostJobModel.Description" ValidateOnInput="true" Type="InputType.Text" ShowClearButton="true"></SfTextBox>
                        <ValidationMessage For="()=>PostJobModel.Description" />
                    </div>
                    <div class="form-group mt-3">
                        <SfDropDownList TValue="string" TItem="JobMode" Placeholder="Select Job Type" DataSource="@JobeTypes">
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="JobMode" ValueChange="OnValueChange"></DropDownListEvents>
                        </SfDropDownList>
                        <ValidationMessage For="()=>PostJobModel.JobMode" />
                    </div>
                    <div class="form-group">
                        <SfTextBox Enabled="true" Placeholder="Job Location (Optional)" FloatLabelType="FloatLabelType.Auto" title="Specify location if not the same as the company location" @bind-Value="PostJobModel.JobLocation" ValidateOnInput="true" Type="InputType.Text" ShowClearButton="true"></SfTextBox>
                        <ValidationMessage For="()=>PostJobModel.JobLocation" />
                    </div>
                </div>
            </div>
            <div class="card shadow border-1">
                <div class="card-header bg-white text-primary fs-6">Provide salary range</div>
                <div class="card-body">
                    <div class="form-group">
                        <SfNumericTextBox Enabled="true" Placeholder="Minimum Salary Amount" Format="C2" FloatLabelType="FloatLabelType.Auto" @bind-Value="PostJobModel.MinSalaryRange" ValidateDecimalOnType="true" ValidateOnInput="true" ShowClearButton="true" ShowSpinButton="true"></SfNumericTextBox>
                        <ValidationMessage For="()=>PostJobModel.MinSalaryRange" />
                    </div>
                    <div class="form-group">
                        <SfNumericTextBox Enabled="true" Placeholder="Maximum Salary Amount" Format="C2" FloatLabelType="FloatLabelType.Auto" @bind-Value="PostJobModel.MaxSalaryRange" ValidateDecimalOnType="true" ValidateOnInput="true" ShowClearButton="true" ShowSpinButton="true"></SfNumericTextBox>
                        <ValidationMessage For="()=>PostJobModel.MaxSalaryRange" />
                    </div>
                    <div class="form-group mt-3">
                        <button class="btn btn-success float-end">Post Job</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .nav {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
    }
</style>

@code
{
    private PostJob PostJobModel { get; set; } = new();
    private List<JobMode> JobeTypes { get; set; } = new();
    private List<Category> Categories { get; set; } = new();
    protected override Task OnInitializedAsync()
    {
        JobeTypes.Add(new() { Id = 1, Name = "Part Time" });
        JobeTypes.Add(new() { Id = 2, Name = "Full Time" });
        LoadDefault();
        return base.OnInitializedAsync();
    }


    private async Task HandleSaveOperation()
    {
        PostJobModel.ClientId = baseService.UserSession.UserId;
        var httpClient = baseService.AddHeaderToHttp();
        var result = await httpClient.PostAsJsonAsync($"{baseService.BaseUrl}/api/Job/post-job", PostJobModel);
        var response = await result.Content.ReadFromJsonAsync<ServiceResponse>();
        await Application.Current.MainPage.DisplayAlert("Info", response.Message, "Ok");
        PostJobModel = new PostJob();
    }

    public void OnValueChange(ChangeEventArgs<string, JobMode> args)
    {
        PostJobModel.JobMode = args.Value;
    }

    private async void LoadDefault()
    {
        var httpClient = baseService.AddHeaderToHttp();
        var result = await httpClient.GetFromJsonAsync<List<Category>>($"{baseService.BaseUrl}/api/Job/get-categories");
        if (result.Count() <= 0) return;
        foreach (var i in result)
            Categories.Add(i);
    }

    public void OnCategoryValueChange(ChangeEventArgs<string, Category> args)
    {
        PostJobModel.CategoryId = int.Parse(args.Value);
    }
}

